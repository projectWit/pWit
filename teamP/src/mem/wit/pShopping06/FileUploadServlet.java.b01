package com.exam;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * 브라우저로부터 전달받은 파일을 저장.
 * 요청정보 및 파일정보를 JSON형태로 응답.
 */
@WebServlet("/FileUploadServlet") 
public class FileUploadServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	
	@Override
	protected void doPost(
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		
		request.setCharacterEncoding("UTF-8");		
		response.setContentType("application/json; charset=UTF-8"); //응답콘텐츠타입을 JSON형태로 지정
		PrintWriter out = response.getWriter();
		
		StringBuffer sb = new StringBuffer(); 
		
		try {
			Map<String, List<FileItem>> fileList = new HashMap<String, List<FileItem>>();
			
			//디스크상의 실제 경로 얻기
			String contextRootPath = this.getServletContext().getRealPath("/");
			
			//1. 메모리나 파일로 업로드 파일 보관하는 FileItem의 Factory설정
			DiskFileItemFactory diskFactory = new DiskFileItemFactory(); 
			diskFactory.setRepository(new File(contextRootPath + "/WEB-INF/temp")); //임시 저장폴더
			
			//2. 업로드 요청을 처리하는 ServletFileUpload 생성
			ServletFileUpload upload = new ServletFileUpload(diskFactory); 
			upload.setSizeMax(10 * 1024 * 1024); //10MB : 전체 최대 업로드 파일 크기
			//upload.setFileSizeMax(10 * 1024 * 1024); //10MB : 파일하나당 최대 업로드 파일 크기
			
			//3. 업로드 요청 파싱해서 FileItem 목록 구함
			@SuppressWarnings("unchecked")
			List<FileItem> items = upload.parseRequest(request); 
			
			
						
			sb.append("{");
			
			for(FileItem item : items) {
				
				//5. FileItem이 폼입력 항목인지 여부에 따라 알맞은 처리
				if (item.isFormField()) { //파일이 아닌경우					
					sb.append(processFormField(out, item)); 
					sb.append(",");						
				} else { //파일인 경우
					//processUploadFile(out, item, contextRootPath);					
					String name = item.getFieldName();
					List<FileItem> value = fileList.get(name);
					if(value == null ){
						value = new ArrayList<FileItem>();						
					}
					value.add(item);
					fileList.put(item.getFieldName(), value);					
				}			
			}
		
			Iterator<String> keys = fileList.keySet().iterator();
			//System.out.println("fileList.keySet()크기:"+fileList.keySet().size());
			for(String key : fileList.keySet()) {
				List<FileItem> f = fileList.get(key);								
				sb.append("\""+key+ "\" : ");					
				if(f.size() > 1) {
					sb.append("[");
					for(int i=0;i<f.size()-1;i++) {											
						sb.append(processUploadFile(out, f.get(i), contextRootPath));
						sb.append(",");	
					}	
					sb.append(processUploadFile(out, f.get(f.size()-1), contextRootPath));
					sb.append("]");
				}else if(f.size() == 1) {											
					sb.append(processUploadFile(out, f.get(0), contextRootPath));						
				}			
				sb.append(",");
				 
			}
			sb.deleteCharAt(sb.length()-1);
						
			sb.append("}");			
			out.print(sb.toString()); //브라우저로 출력(응답)
		} catch(Exception e) {
			
			e.printStackTrace();
			
			out.print("{\"result\":\"500\"");
			out.print(",\"msg\":\""+e.getMessage());			
			out.print("\"}");			
			
		}
	}

	//파일 양식 처리
	private String processUploadFile(
			PrintWriter out, FileItem item, String contextRootPath) 
			throws Exception {
		String name = item.getFieldName(); //필드 이름 얻기
		String fileName = item.getName(); //파일명 얻기
		String contentType = item.getContentType(); //컨텐츠 타입 얻기
		long fileSize = item.getSize(); //파일의 크기 얻기
		
		//업로드 파일명을 현재시간으로 변경후 저장
		//String uploadedFileName = System.currentTimeMillis() +fileName.substring(fileName.lastIndexOf("."));
		String uploadedFileName = System.currentTimeMillis() 
				+ UUID.randomUUID().toString() +fileName.substring(fileName.lastIndexOf("."));;
		//저장할 절대경로로 파일 객체 생성
		File uploadedFile = new File(contextRootPath + "/upload/" + uploadedFileName); 
		item.write(uploadedFile); //파일 저장
		
		StringBuffer tmpSb = new StringBuffer(); 
		
		tmpSb.append("{");
		tmpSb.append("\"name\":\"" + name + "\",");
		tmpSb.append("\"fileName\":\"" + fileName + "\",");
		tmpSb.append("\"contentType\":\"" + contentType + "\",");
		tmpSb.append("\"fileSize\":\"" + fileSize + "\",");
		tmpSb.append("\"uploadedFileName\":\"" + uploadedFileName+"\"");
		tmpSb.append("}");
		
		// "name":photo, "fileName" : "a.png", "contentType" : "image/png", "fileSize":205048, "uploadedFileName": "1406179043174.png"
		return tmpSb.toString();		
	}
	
	//일반 양식 처리
	private String processFormField(PrintWriter out, FileItem item) 
		throws Exception{
		String name = item.getFieldName();
		String value = item.getString("UTF-8");
		
		//out.print("\""+name + "\" : \"" + value + "\""); // "title":"제목"
		return "\""+name + "\" : \"" + value + "\"";
	}
	
	
}